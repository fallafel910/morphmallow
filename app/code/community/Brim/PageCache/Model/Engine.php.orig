<?php
/**
 * Brim LLC Commercial Extension
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Brim LLC Commercial Extension License
 * that is bundled with this package in the file Brim-LLC-Magento-License.pdf.
 * It is also available through the world-wide-web at this URL:
 * http://ecommerce.brimllc.com/license
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to support@brimllc.com so we can send you a copy immediately.
 *
 * @category   Brim
 * @package    Brim_PageCache
 * @copyright  Copyright (c) 2011-2014 Brim LLC
 * @license    http://ecommerce.brimllc.com/license
 */

 
class Brim_PageCache_Model_Engine {

    const RESPONSE_HEADER               = 'X-Fpc';

    const RESPONSE_HEADER_EXPIRES_DATE  = 'X-Fpc-Expires-Date';

    const RESPONSE_HEADER_EXPIRES       = 'X-Fpc-Expires-Length';

    const RESPONSE_HEADER_CONDITIONS    = 'X-Fpc-Conditions';

    const RESPONSE_HEADER_STORE         = 'X-Fpc-Store';

    const RESPONSE_HEADER_ORIG_TIME     = 'X-Fpc-Orig-Time';

    const RESPONSE_HEADER_MISS          = 'X-Fpc-Miss';

    const RESPONSE_HEADER_FAILED        = 'X-Fpc-Reason';

    const FPC_TAG       = 'BRIM_FPC';

    const CACHE_HIT     = 'Hit';
    const CACHE_MISS    = 'Miss';

    const DEBUG_LOG = 'brim-fpc-debug.log';

    /**
     * @var array status of conditionals for caching pages.
     */
    protected $_conditions = array(
        'logged_out'    => 0,
        'logged_in'     => 0,
        'empty_cart'    => 0,
        'no_messages'   => 0,
    );

    /**
     * @var bool condition initialization flag
     */
    protected $_initConditions = false;

    /**
     * @var null Cached fpc cache id, prevents the need to generate multiple times.
     */
    protected $_fpcCacheId  = null;

    /**
     * @var array Contains tags page will be cache with
     */
    protected $_pageTags    = array(self::FPC_TAG);

    /**
     * @var array Holds arguments to generate block update containers.
     */
    protected $_blockUpdateData = array();

    /**
     * Time tryServe was entered.  Used for debugging.
     * @var null
     */
    protected static $_start_time = null;

    /**
     * @var array contains the conditionals that failed for debugging.
     */
    protected $_failed_conditions = null;

    /**
     * @var Mage_Core_Model_Cache Cache storage engine
     */
    protected $_cache = null;

    /**
     * @var Brim_PageCache_Helper_Data
     */
    protected $_helper = null;

    /**
     * Holds the message count before the request is rendered to HTML and messages removed from the session.
     * @var null|int
     */
    protected $_cachedMessageCount = null;

    /**
     * Constructs engine.
     *
     * @return void
     */
    public function __construct() {
        // Get message count before page is rendered
        $this->_cachedMessageCount = Mage::getSingleton('core/session')->getMessages()->count()
            + Mage::getSingleton('checkout/session')->getMessages()->count()
            + Mage::getSingleton('customer/session')->getMessages()->count()
            + Mage::getSingleton('catalog/session')->getMessages()->count();
    }

    /**
     * Determines if the extension is enabled via System > Cache Management
     *
     * @return bool
     */
    public function isCacheTypeEnabled() {
        return Mage::app()->useCache('brim_pagecache');
    }

    /**
     * Determines if the extension is enabled via System > Configuration
     *
     * @return bool
     */
    public function isExtensionEnabled() {
        return  (bool) Mage::getStoreConfig(Brim_PageCache_Model_Config::XML_PATH_ENABLED);
    }

    /**
     * Determines if the cache type and extension are both enabled.
     *
     * @return bool
     */
    public function isEnabled() {
        return Mage::app()->useCache('brim_pagecache')
               && Mage::getStoreConfig(Brim_PageCache_Model_Config::XML_PATH_ENABLED);
    }

    /**
     * Checks to see if a page can be full page cached.
     *
     * @return bool
     */
    public function isPageCachable() {
        $rootBlock = Mage::app()->getLayout()->getBlock('root');
        if ($rootBlock && $rootBlock->getCachePageFlag()) {
            return true;
        }
        
        return false;
    }

    /**
     *
     *
     * @return Brim_PageCache_Helper_Data
     */
    public function getHelper() {
        if ($this->_helper == null) {
            $this->_helper = Mage::helper('brim_pagecache');
        }

        return $this->_helper;
    }

    /**
     * Handles logic for caching pages.  Currently checks the root block for the
     * "CachePageFlag".  Pages are only cached if the user is not logged in and does
     * not have items in their cart.
     *
     * @param $observer
     * @return void
     */
    public function cachePage(Zend_Controller_Response_Http $response) {

        // Check if cache flag is set
        $rootBlock = Mage::app()->getLayout()->getBlock('root');
        if ($rootBlock && $rootBlock->getCachePageFlag()) {
            if ($this->passesConditions($rootBlock->getCachePageConditions())) {

                $cache      = $this->getCache();
                $id         = $this->generateFPCId();

                if ($rootBlock->getCachePageExpires() > 0) {
                    $expires = $rootBlock->getCachePageExpires();
                } else {
                    //default expires
                    $expires = Mage::getStoreConfig(Brim_PageCache_Model_Config::XML_PATH_EXPIRES);
                }

                $storageObject = Mage::getModel('brim_pagecache/storage');

                $storageObject->setRequest(Mage::app()->getRequest());

                if (Mage::getStoreConfig(Brim_PageCache_Model_Config::XML_PATH_ENABLE_MINIFY_HTML)) {
                    if ($this->getHelper()->isHTML($response)) {
                        // Minify the response body.  Helps save on cache storage space
                        // Basic grouped product page 34k in size was about 28K minified,
                        $minifyBody = Brim_PageCache_Model_Minify_HTML::minify($response->getBody());
                        $response->setBody($minifyBody);
                    }
                }

                $storageObject->setResponse($response);

                /**
                 * Block update data contains partial layouts for each block.  Allows us to regenerate each one
                 * with out loosing customizations.
                 */
                $storageObject->setBlockUpdateData($this->getBlockUpdateData());

                // Set the expected expires time for this page
                $date      = Mage::app()->getLocale()->date()->addSecond($expires);
                $storageObject->setData(
                    self::RESPONSE_HEADER_EXPIRES_DATE,
                    $date->get(Zend_Date::RFC_1123)
                );
                $storageObject->setData(
                    self::RESPONSE_HEADER_EXPIRES,
                    $expires
                );
                $storageObject->setData(
                    self::RESPONSE_HEADER_CONDITIONS,
                    $rootBlock->getCachePageConditions()
                );
                $storageObject->setData(
                    self::RESPONSE_HEADER_STORE,
                    Mage::app()->getStore()->getCode()
                );

                $storageObject->setData(
                    self::RESPONSE_HEADER_ORIG_TIME,
                    microtime(true) - self::$_start_time
                );

                $this->debug('Saving page with cache id : ' . $id);

                /** @var $product Mage_Catalog_Model_Product */
                if (($product = Mage::registry('product')) != null) {
                    $this->devDebug('Registering Tag: '. self::FPC_TAG . '_PRODUCT_' . $product->getId());
                    $this->registerPageTags(self::FPC_TAG . '_PRODUCT_' . $product->getId());
                    foreach ($product->getCategoryIds() as $cid) {
                        $this->registerPageTags(self::FPC_TAG . '_PRODUCT_CATEGORY_' . $cid);
                    }
                    $productData    = Mage::helper('brim_pagecache')->filterComplexValues($product->getData());
                    $productData['category_ids'] = $product->getCategoryIds(); // they get filtered out adding back.
                    $storageObject->setCurrentProduct($productData);
                }
                if (($category = Mage::registry('current_category')) != null) {
                    // We don't want to store the current category if we have a product defined.  If accessed
                    // via the homepage there won't be any.
                    if ($product == null){
                        $this->devDebug('Registering Tag: '. self::FPC_TAG . '_CATEGORY_' . $category->getId());
                        $this->registerPageTags(self::FPC_TAG . '_CATEGORY_' . $category->getId());
                    }

                    $storageObject->setCurrentCategory(
                        Mage::helper('brim_pagecache')->filterComplexValues($category->getData())
                    );
                }

                // Store tags in object
                $storageObject->setTags($this->getPageTags());

                $cache->save(serialize($storageObject), $id, $this->getPageTags(), $expires);

                // Attempt to save page to level 1 cache
                $level1Cache = Mage::getSingleton('brim_pagecache/processor_level1');
                if ($level1Cache->canUseStaticCache()) {
                    $level1Cache->save($storageObject, $this->getPageTags(), $expires);
                }
            } else {
                // failed conditions
                if ($response->canSendHeaders(false)) {
                    $response->setHeader(
                        self::RESPONSE_HEADER_FAILED,
                        $this->_failed_conditions
                    );
                }
            }
        } else {
            if ($response->canSendHeaders(false)) {
                // page not set to cache
                $response->setHeader(
                    self::RESPONSE_HEADER_FAILED,
                    'no_cache'
                );
            }
        }
    }

    /**
     * Added cache tags to page.
     *
     * @param array $tags
     */
    public function registerPageTags($tags) {
        if (is_string($tags)) {
            $tags = array($tags);
        }

        foreach ($tags as $tag) {
            $this->_pageTags[] = $tag;
        }
    }

    /**
     * Returns cache tags for the page page.
     *
     * @return array
     */
    public function getPageTags() {
        return $this->_pageTags;
    }

    /**
     * Checks cache for cached pages.  If found the original response is served,
     * otherwise normal processing will occur.
     *
     * @param $observer
     * @return void
     */
    public function servePage() {
        if (!$this->isEnabled()) {
            return;
        }

//        Varien_Profiler::enable();

        Varien_Profiler::start('Brim_PageCache::servepage');

        self::$_start_time = microtime(true);

        //
        Varien_Profiler::start('Brim_PageCache::servepage::cacheid');
        $cache  = $this->getCache();
        $id     = $this->generateFPCId();
        Varien_Profiler::stop('Brim_PageCache::servepage::cacheid');

        try {
            // Process Action Events
            $this->processFPCActions();

            $response = Mage::app()->getResponse();

            // Check for cached page
            $this->debug('Checking page cache with Id : ' . $id);
            //if (false && ($cachedData = $cache->load($id))) {
            if (empty($_REQUEST['FORCE_MISS']) && ($cachedData = $cache->load($id))) {
                $cachedStorage = unserialize($cachedData);
                if ($cachedStorage instanceof Brim_PageCache_Model_Storage) {

                    /**
                     * @var $cachedResponse Zend_Controller_Response_Http
                     */
                    if (!($cachedResponse = $cachedStorage->getResponse())) {
                        $this->devDebug("Cached object missing response: " . $id);
                        return false;
                    }

                    $cachedRequest = $cachedStorage->getRequest();

                    // Check page conditions
                    if ($this->passesConditions($cachedStorage[self::RESPONSE_HEADER_CONDITIONS])) {

                        $this->debug('Serving cached page.');

                        $response->setHeader(self::RESPONSE_HEADER, self::CACHE_HIT);

                        if (Mage::getStoreConfig(Brim_PageCache_Model_Config::XML_PATH_DEBUG_RESPONSE)) {
                            $response->setHeader(
                                self::RESPONSE_HEADER_EXPIRES_DATE,
                                $cachedStorage[self::RESPONSE_HEADER_EXPIRES_DATE]
                            );
                            $response->setHeader(
                                self::RESPONSE_HEADER_EXPIRES,
                                $cachedStorage[self::RESPONSE_HEADER_EXPIRES]
                            );
                            $response->setHeader(
                                self::RESPONSE_HEADER_CONDITIONS,
                                $cachedStorage[self::RESPONSE_HEADER_CONDITIONS]
                            );
                            $response->setHeader(
                                self::RESPONSE_HEADER_STORE,
                                $cachedStorage[self::RESPONSE_HEADER_STORE]
                            );
                            $response->setHeader(
                                self::RESPONSE_HEADER_ORIG_TIME,
                                $cachedStorage[self::RESPONSE_HEADER_ORIG_TIME]
                            );
                        }

                        // Apply cached response status header to current response
                        Mage::helper('brim_pagecache')->copyCachedHeadersToResponse(
                            $cachedResponse->getHeaders(),
                            $response
                        );

                        $categoryId = null;
                        if (($productData = $cachedStorage->getCurrentProduct()) != null) {
                            // product page
<<<<<<< HEAD
                            $productModel = Mage::getModel('catalog/product')->setData($productData);
                            Mage::register('current_product', $productModel);

                            $categoryId = $cachedRequest->getParam('category');
                            if (!$categoryId && $categoryId !== false) {
                                $categoryId = Mage::getSingleton('catalog/session')->getLastVisitedCategoryId();
                                if (!$productModel->canBeShowInCategory($categoryId)) {
                                    $categoryId = null;
=======
                            Mage::register('current_product', Mage::getModel('catalog/product')->setData($productData));

                            if (!Mage::getStoreConfig(Mage_Catalog_Helper_Product::XML_PATH_PRODUCT_URL_USE_CATEGORY)) {
                                // can not set category data based on product as this url might have a different category
                                // than the current user.
                                if (($categoryData = $cachedStorage->getCurrentCategory()) != null) {
                                    Mage::getSingleton('catalog/session')->setLastViewedCategoryId($categoryData['entity_id']);
>>>>>>> master
                                }
                            } else if(!$productModel->canBeShowInCategory($categoryId)) {
                                $categoryId = null;
                            }
                        } else if (($categoryData = $cachedStorage->getCurrentCategory()) != null) {
                            // category page
                            $categoryId = $categoryData['entity_id'];
                            Mage::getSingleton('catalog/session')->setLastViewedCategoryId($categoryId);
                            Mage::getSingleton('catalog/session')->setLastVisitedCategoryId($categoryId);
                        }

                        if ($categoryId) {
                            // Loading cat drop to 2ms from cache from 50ms from db on dev system
                            Varien_Profiler::start('Brim_PageCache::servepage::loadCategoryData');
                            Varien_Profiler::start('Brim_PageCache::servepage::loadCategoryDataFromCache');
                            $catCacheId = self::FPC_TAG . '_STORE_' . MAge::app()->getStore()->getId() . '_CATEGORY_' . $categoryId;
                            if (($catData = $cache->load($catCacheId))) {
                                $catModel = Mage::getModel('catalog/category')->setData(unserialize($catData));
                                Varien_Profiler::stop('Brim_PageCache::servepage::loadCategoryDataFromCache');
                            } else {
                                Varien_Profiler::stop('Brim_PageCache::servepage::loadCategoryDataFromCache');

                                $catModel = Mage::getModel('catalog/category')->load($categoryId);
                                $catData = Mage::helper('brim_pagecache')->filterComplexValues($catModel->getData());
                                $cache->save(serialize($catData), $catCacheId, array(self::FPC_TAG . '_CATEGORY_' . $categoryId));
                            }
                            Varien_Profiler::stop('Brim_PageCache::servepage::loadCategoryData');

                            Mage::register('current_category', $catModel);
                        }

                        if (($product = Mage::registry('product')) != null) {
                            $this->devDebug('Registering Tag: '. self::FPC_TAG . '_PRODUCT_' . $product->getId());
                            $this->registerPageTags(self::FPC_TAG . '_PRODUCT_' . $product->getId());
                        }
                        if (($category = Mage::registry('current_category')) != null && $product == null) {
                            $this->devDebug('Registering Tag: '. self::FPC_TAG . '_CATEGORY_' . $category->getId());
                            $this->registerPageTags(self::FPC_TAG . '_CATEGORY_' . $category->getId());
                        }

                        // apply dynamic block updates
                        $body = $cachedResponse->getBody();

                        // Matches and updates block as needed.
                        Varien_Profiler::start('Brim_PageCache::blockupdate');

                        if (($_blockUpdateData = $cachedStorage->getBlockUpdateData()) != null) {
                            $this->setBlockUpdateData($_blockUpdateData);
                        }

                        $newBody = preg_replace_callback(
                            '/\<!\-\- BRIM_FPC ([\w\d\=\+\.\_\-]*) ([\w\d\=\+]*) \-\-\>(.*)\<!\-\- \/BRIM_FPC \1 \-\-\>/siU',
                            'Brim_PageCache_Model_Engine::applyDynamicBlockUpdates',
                            $body
                        );

                        // Double check the new proccessed body content to ensure no fatal errors occurred in applyDynamicBlockUpdates
                        if ($newBody !== null) { $body  = $newBody; }

                        Varien_Profiler::stop('Brim_PageCache::blockupdate');

                        // Form Key Update
                        $formKey    = Mage::getSingleton('core/session')->getFormKey();
                        $chars      = Mage_Core_Helper_Data::CHARS_LOWERS . Mage_Core_Helper_Data::CHARS_UPPERS . Mage_Core_Helper_Data::CHARS_DIGITS;
                        // Accounts for Json encoded strings
                        $newBody    = preg_replace("#(\\\\?/form_key\\\\?/)[$chars]{8,24}(\\\\?/)#siU", "$1{$formKey}$2", $body);

                        if ($newBody !== null) { $body  = $newBody; }

                        // Processes urls like "___SID=U" injecting the proper session id (store switching) if need
                        // otherwise it's removed.
                        $urlModel   = Mage::getSingleton('core/url');
                        $body       = $urlModel->sessionUrlVar($body);

                        // Update response object.
                        $response->setBody($body);
                        $response->sendResponse();

                        // Dispatch post dispatch event which is used for
                        // logging requests, visitors etc.
                        try {
                            Varien_Profiler::start('Brim_PageCache::servePage::mockControllerActionPostdispatch');
                            $mockControllerAction = new Varien_Object(array(
                                'request' => Mage::app()->getRequest()
                            ));
                            Mage::dispatchEvent(
                                'controller_action_postdispatch',
                                array('controller_action' => $mockControllerAction)
                            );
                            Varien_Profiler::stop('Brim_PageCache::servePage::mockControllerActionPostdispatch');
                        } catch(Exception $postEventException) {
                            Mage::logException($postEventException);
                        }

                        Varien_Profiler::stop('Brim_PageCache::servepage');

                        if (Mage::getIsDeveloperMode() == true) {
                            echo (Mage::app()->getLayout()->createBlock('core/profiler')->toHtml());
                        }

                        // L1 cache miss occurred, check user can use the L1 static cache and save the updated response.
                        $level1Cache = Mage::getSingleton('brim_pagecache/processor_level1');
                        if ($level1Cache->canUseStaticCache()) {
                            $cachedStorage->getResponse()->setBody($body);
                            $level1Cache->save(
                                $cachedStorage,
                                $cachedStorage->getTags(),
                                $cachedStorage->getData(self::RESPONSE_HEADER_EXPIRES)
                            );
                        }
                        exit;
                    } else {
                        // failed conditions
                        $response->setHeader(
                            self::RESPONSE_HEADER_MISS,
                            $this->_failed_conditions
                        );
                    }
                } else {
                    $response->setHeader(
                        self::RESPONSE_HEADER_MISS,
                        'invalid_object'
                    );
                }
            }
        } catch (Exception $e) {
            Mage::logException($e);
        }

        $response = Mage::app()->getResponse();
        $response->setHeader(self::RESPONSE_HEADER, self::CACHE_MISS);

        Varien_Profiler::stop('Brim_PageCache::servepage');
    }

    /**
     * Generates a cache id for requests.
     *
     * @param Zend_Controller_Request_Http $request
     * @return string
     */
    public function generateFPCId($request=null) {

        $request = Mage::helper('brim_pagecache')->getRequest($request);

        if ($this->_fpcCacheId == null) {
            $this->_fpcCacheId = 'BRIM_FPC_'
                . Mage::app()->getStore()->getCode() . '_'
                . Mage::getDesign()->getPackageName() . '_'
                . Mage::getDesign()->getTheme('layout') . '_'
                . Mage::app()->getLocale()->getLocaleCode() . '_'
                . Mage::app()->getStore()->getCurrentCurrencyCode() . '_'
                // Separate out the cache by customer group.
                // Helps with Logged in and out users for things like account links
                . $this->_getCustomerGroupForCacheKey()
                //. Mage::helper('persistent')->isShoppingCartPersist() . '_ '
                . (($isMobile  = Brim_PageCache_Helper_Mobile::isMobile()) !== null ? $isMobile . '_' : '')
                // using sha1 hash to help limit the key size
                . sha1(
                    Mage::helper('brim_pagecache')->normalizeUri($request->getRequestUri()) . '_'
                    . $request->getHttpHost() . '_'
                    . $request->getScheme()
                )
            ;
            $this->debug('Generated Id : '. $this->_fpcCacheId);
        }


        return $this->_fpcCacheId;
    }

    /**
     * Returns a customer group key based on settings.
     *
     * @return string
     */
    protected function _getCustomerGroupForCacheKey() {

        $key = '';

        if (Mage::getStoreConfig(Brim_PageCache_Model_Config::XML_PATH_CONDITIONS_USE_CTR_GRP)) {
            $cgId   = Mage::getSingleton('customer/session')->getCustomerGroupId();
            if (Mage::getStoreConfig(Brim_PageCache_Model_Config::XML_PATH_CONDITIONS_CMB_CTR_GRP)
                && ($cgId == Mage_Customer_Model_Group::NOT_LOGGED_IN_ID || $cgId == 1)) {
                $key = '01_';
            } else {
                $key = Mage::getSingleton('customer/session')->getCustomerGroupId() . '_';
            }
        }

        return $key;
    }

    /**
     * @param string $conditionsToCheck
     * @return bool
     */
    public function passesConditions($conditionsToCheck = 'all') {
        Varien_Profiler::start('Brim_PageCache::passesConditions');

        if (Mage::app()->getCookie()->get('nocache') == 1) {
            $this->_failed_conditions = 'no_cache_cookie';
            return false;
        }

        if (isset($_GET['no_cache'])) {
            $this->_failed_conditions = 'no_cache';
            return false;
        }

        if (isset($_GET['___store'])) {
            $this->_failed_conditions = 'store_change';
            return false;
        }

        $maxParams = Mage::getStoreConfig(Brim_PageCache_Model_Config::XML_PATH_CONDITIONS_MAX_PARAMS);
        if ($maxParams != -1 && count($_GET) > $maxParams) {
            $this->_failed_conditions = 'max_params';
            return false;
        }

        if ($this->_initConditions === false) {
            $this->_conditions['logged_in']   = Mage::getSingleton('customer/session')->isLoggedIn();
            $this->_conditions['logged_out']  = !$this->_conditions['logged_in'];
            $this->_conditions['empty_cart']  = !Mage::getSingleton('checkout/session')->getQuote()->hasItems();

            // TODO : Scan the raw session for messages.
            $messageTotal = Mage::getSingleton('core/session')->getMessages()->count()
                + Mage::getSingleton('checkout/session')->getMessages()->count()
                + Mage::getSingleton('customer/session')->getMessages()->count()
                + Mage::getSingleton('catalog/session')->getMessages()->count();
            $this->_conditions['no_messages'] = ($messageTotal == 0) && ($this->_cachedMessageCount == 0);

            $this->_initConditions = true;
        }

        if ($conditionsToCheck == 'all' || $conditionsToCheck == '') {
            $conditionsToCheck = array_keys($this->_conditions);
        }

        if(is_string($conditionsToCheck)) {
            $conditionsToCheck = explode(',', $conditionsToCheck);
            foreach ($conditionsToCheck as $key => $text) {
                $conditionsToCheck[$key] = trim($text);
            }
        };

        $failed = array();
        foreach ($conditionsToCheck as $conditionName) {
            if ($this->_conditions[$conditionName] == false) {
                $failed[] = $conditionName;
            }
        }

        Varien_Profiler::stop('Brim_PageCache::passesConditions');

        if (count($failed) >0){
            $this->_failed_conditions = join(',', $failed);
            return false;
        }

        return true;
    }

    /**
     * Calls methods to perform actions as needed.
     *
     *  Ex: Brim_PageCache_Model_Container_Recentlyviewed::addProductViewed - records
     *      products viewed to block updates.
     *
     * @return bool
     */
    public function processFPCActions() {
        $config     = Mage::app()->getConfig();

        $request    = Mage::app()->getRequest();

        $actionKey  = $request->getModuleName() . '_'
                . $request->getControllerName() . '_'
                . $request->getActionName();

        if (($actions = $config->getNode('frontend/brim_pagecache/actions/' . $actionKey)) != null) {
            $params = new Varien_Object($request->getParams());
            foreach ($actions->children() as $key => $action) {
                $class = (string)$action->class;
                $method = (string)$action->method;
                // using call_user_func for pre PHP 5.3 compat
                call_user_func("$class::$method", $params);
            }
        }

        return true;
    }

    /**
     * Callback for dynamic block updates.  Return the new content from the container.
     *
     * @static
     * @param $match
     * @return string
     */
    static public function applyDynamicBlockUpdates($match) {
        $originalWrapper= $match[0];
        $blockName      = $match[1];
        $blockUpdateKey = $match[2];
        $originalContent= $newContent = $match[3];

        Varien_Profiler::start('Brim_PageCache::applyDynamicBlockUpdates::' . $blockName);

        $engine         = Mage::getSingleton('brim_pagecache/engine');

        try {
            if (($args = $engine->getBlockUpdateData($blockUpdateKey)) !== false) {
                $engine->debug("Dynamic block update container : $blockName - {$args['container']}");

                $model  = Mage::getModel($args['container'], $args);

                if ($model->blockRequiresUpdate()) {
                    $newContent = "<!-- BRIM_FPC {$args['name']} {$blockUpdateKey} -->\n"
                        .  $model->renderBlock() . "\n"
                        . "<!-- /BRIM_FPC {$args['name']} -->";
                }
            } else {
                $engine->debug("Block update key not found : $blockUpdateKey");
            }
        } catch (Exception $e) {
            $engine->debug($e->__toString());
        }
        Varien_Profiler::stop('Brim_PageCache::applyDynamicBlockUpdates::' . $blockName);

        return $newContent;
    }

    /**
     * Wrapper for Mage::log.  Only log if brim page cache debug setting is enabled.
     *
     * @param $message
     * @return void
     */
    public function debug() {
        if (Mage::getStoreConfig(Brim_PageCache_Model_Config::XML_PATH_DEBUG)) {
            $messages = func_get_args();
            foreach ($messages as $message) {
                if ($message instanceof Exception) {
                    $message = $message->__toString();
                }
                Mage::log($message, Zend_Log::DEBUG, self::DEBUG_LOG, true);
            }
        }
    }

    /**
     * debug messages for developers
     *
     * @param $message
     */
    public function devDebug() {
        if (Mage::getIsDeveloperMode())  {
            $args = func_get_args(); // function can not be used as a param prior to 5.3.0
            call_user_func_array(array($this, 'debug'), $args);
        }
    }

    /**
     * Checks if Brim's FPC debug mode is turned on.
     * @return mixed
     */
    public function isDebug() {
        return Mage::getStoreConfig(Brim_PageCache_Model_Config::XML_PATH_DEBUG);
    }


    /**
     * Mark content with a dynamic wrapper.
     *
     * @param $containerArgs
     * @param $html
     * @return string
     */
    public function markContent($containerArgs, $html) {
        $html = "<!-- BRIM_FPC {$containerArgs['name']} {$this->registerBlockUpdateData($containerArgs)} -->\n"
            .  $html . "\n"
            . "<!-- /BRIM_FPC {$containerArgs['name']} -->";

        return $html;
    }

    /**
     * Mark content via the event transport mechanism. Magento 1.4.1+ 
     *
     * @param $containerArgs array
     * @param $transport Varien_Object
     * @return void
     */
    public function markContentViaTransport($containerArgs, Varien_Object $transport) {
        $transport->setHtml(
            "<!-- BRIM_FPC {$containerArgs['name']} {$this->registerBlockUpdateData($containerArgs)} -->\n"
            .  $transport->getHtml() . "\n"
            . "<!-- /BRIM_FPC {$containerArgs['name']} -->"
        );
    }

    /**
     * Mark content via the blocks frame tags. Magento 1.4.0.0
     *
     * @param $containerArgs array
     * @param $block Mage_Core_Block_Abstract
     * @return void
     */
    public function markContentViaFrameTags($containerArgs, Mage_Core_Block_Abstract $block) {
        $openTag = "!-- BRIM_FPC {$containerArgs['name']} {$this->registerBlockUpdateData($containerArgs)} --";
        $closeTag = "!-- /BRIM_FPC {$containerArgs['name']} --";
        $block->setFrameTags($openTag, $closeTag);
    }

    /**
     * Get block update data for use in the FPC storage object or for generating block updates.
     *
     * @param null $key
     * @return array|bool
     */
    public function getBlockUpdateData($key=null) {
        if ($key == null) {
            return $this->_blockUpdateData;
        }

        if (array_key_exists($key, $this->_blockUpdateData)) {
            return $this->_blockUpdateData[$key];
        }

        return false;
    }

    /**
     * Init the block update storage.
     *
     * @param $data
     */
    public function setBlockUpdateData($data) {
        $this->_blockUpdateData = $data;
    }

    /**
     * Register block update data with the FPC storage object.
     *
     * @param $value
     * @return string Key value to look up block update data
     */
    public function registerBlockUpdateData($value) {

        if (array_key_exists('name', $value)) {
            $key = ($value['name'] . '-' . microtime(true));
        } else {
            $key = ((is_string($value)) ? $value : serialize($value));
        }
        $key = md5($key);

        $this->_blockUpdateData[$key] = $value;

        return $key;
    }

    /**
     * Saves defined session variables to a cookie
     *
     * @return Brim_PageCache_Model_Engine
     */
    public function updateSessionVarsCookie() {
        /**
         * @var $cookie Mage_Core_Model_Cookie
         */
        $svarsCookieValue   = array();

        $sessionVarsDef = Mage::getStoreConfig('brim_pagecache/conditions/session_vars');

        if (is_array($sessionVarsDef) && count($sessionVarsDef) > 0) {
            foreach ($sessionVarsDef as $def) {
                try {
                    $variable   = $def['variable'];
                    $model      = $def['model'];

                    if (!empty($model)) {
                        if (($value = Mage::getSingleton($model)->getData($variable)) != ''){
                            $svarsCookieValue[$variable] = $value;
                        }
                    } else {
                        if (!empty($_SESSION[$variable])) {
                            $svarsCookieValue[$variable] = $_SESSION[$variable];
                        }
                    }
                } catch (Exception $e) {
                    $this->debug($e);
                }
            }
        }

        $cookie = Mage::getSingleton('core/cookie');
        if (count($svarsCookieValue) > 0) {
            $cookie->set(Brim_PageCache_Model_Config::SESSION_VARS_COOKIE_NAME, Zend_Json::encode($svarsCookieValue));
        } else {
            $cookie->delete(Brim_PageCache_Model_Config::SESSION_VARS_COOKIE_NAME);
        }

        return $this;
    }

    /**
     * Initializes the FPC cache based on admin settings. FPC can piggy back on the core magento cache or use it's own.
     */
    protected function _initCache() {
        try {
            if (($this->_cache = Mage::registry('brim_pagecache_storage')) == false) {
                $useSystemCache = Mage::getStoreConfig(Brim_PageCache_Model_Config::XML_PATH_STORAGE_USE_SYSTEM_CACHE);
                if ($useSystemCache) {
                    $this->_cache = Mage::app()->getCacheInstance();
                } else {
                    $cacheConfig  = Brim_PageCache_Model_Config::factoryCache();
                    $this->_cache = Mage::getModel('brim_pagecache/cache', $cacheConfig);
                }
                Mage::register('brim_pagecache_storage', $this->_cache);
            }
        } catch (Exception $e){
            // Fall back to default cache
            Mage::logException($e);
            $this->_cache = Mage::app()->getCacheInstance();
        }
    }


    /**
     * @return Mage_Core_Model_Cache|null
     */
    public function getCacheInstance() {

        if ($this->_cache == null) {
            $this->_initCache();
        }

        return $this->_cache;
    }

    /**
     * @return Zend_Cache_Core
     */
    public function getCache() {

        if ($this->_cache == null) {
            $this->_initCache();
        }

        return $this->_cache->getFrontend();
    }
}